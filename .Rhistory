a<-w1[Ozone>31 & Temp>90]
a<-mean(Solar.R,w1[Ozone>31 & Temp>90])
a<-mean(Solar.R,w1[Ozone>31 & Temp>90,])
w1[Ozone>31 & Temp>90,]
w1[Ozone>31 & Temp>90,]->a
mean(a$Solar.R,NA.rm=T)
mean(a$Solar.R,na.rm=T)
w1[Ozone==6,]->a
a
w1[Month==6,]->a
View(a)
mean(a$Temp)
max(Ozone,Month==5)
max(w1$Ozone,w1$Month==5)
w1$Month==5
w1[w1$Month==5]->a
w1[w1$Month==5,]->a
View(a)
max(a$Ozone)
max(a$Ozone.na.rm=T)
max(a$Ozone,na.rm=T)
w1[w1$Month==5]
w1[w1$Month==5]->a
w1$Month==5
w1[Ozone>31 & Temp>90,]
w1[Ozone>31 & Temp>90,]->a
attach(w1)
w1[Ozone>31 & Temp>90,]->a
w1[Ozone>31 & Temp>90,]
length("get length")
source('~/GitHub/Coursera-Computing-for-Data-Analysis-R/Week 1/getmonitor.R')
getmonitor(7,"Week 1//specdata",TRUE)
source('~/GitHub/Coursera-Computing-for-Data-Analysis-R/Week 1/getmonitor.R')
getmonitor(7,"Week 1//specdata",TRUE)
source('~/GitHub/Coursera-Computing-for-Data-Analysis-R/Week 1/getmonitor.R')
getmonitor(7,"Week 1//specdata",TRUE)
results<-data.frame(nrow=0,ncol=0)
View(results)
results<-data.frame(id,nobs)
View(results)
results<-data.frame(id,nobs)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results<-data.frame(id,nobs)
for id in id{
id <- as.numeric(id)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
}
#Part 2
#Write a function that reads a directory full of files and reports the number of completely observed cases in each data file. The function should return a data frame where the first column is the name of the file and the second column is the number of complete cases. A prototype of this function follows
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results<-data.frame(id,nobs)
for id in id{
id <- as.numeric(id)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
}
You can see some example output from this function. The function that you write should be able to match this output. Please save your code to a file named complete.R. To run the test script for this part, make sure your working directory has the file complete.R in it and the run
source("http://spark-public.s3.amazonaws.com/compdata/scripts/complete-test.R")
complete.testscript()
#Part 2
#Write a function that reads a directory full of files and reports the number of completely observed cases in each data file. The function should return a data frame where the first column is the name of the file and the second column is the number of complete cases. A prototype of this function follows
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results<-data.frame(id,nobs)
for id in id{
id <- as.numeric(id)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
}
#Part 2
#Write a function that reads a directory full of files and reports the number of completely observed cases in each data file. The function should return a data frame where the first column is the name of the file and the second column is the number of complete cases. A prototype of this function follows
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results<-data.frame(id,nobs){
for id in id{
id <- as.numeric(id)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
}
results<-data.frame(id,nobs)
View(results)
#Part 2
#Write a function that reads a directory full of files and reports the number of completely observed cases in each data file. The function should return a data frame where the first column is the name of the file and the second column is the number of complete cases. A prototype of this function follows
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results<-data.frame(id,nobs){
for id in id{
id <- as.numeric(id)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
rbind(data.frame(id=id,nobs=nrow(id)))
}
#Part 2
#Write a function that reads a directory full of files and reports the number of completely observed cases in each data file. The function should return a data frame where the first column is the name of the file and the second column is the number of complete cases. A prototype of this function follows
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results<-data.frame(id,nobs)
for id in id{
id <- as.numeric(id)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
rbind(data.frame(id=id,nobs=nrow(id)))
}
complete <- function(directory, id = 1:332){
results<-data.frame(id,nobs)
for id in id{
id <- as.numeric(id)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
rbind(data.frame(id=id,nobs=nrow(id)))
}
for id in id{
id <- as.numeric(id)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
rbind(data.frame(id=id,nobs=nrow(id)))
}
complete <- function(directory, id = 1:332){
results<-data.frame(id,nobs)
for i in id{
id <- as.numeric(i)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
rbind(data.frame(id=i,nobs=nrow(i)))
}
#Part 2
#Write a function that reads a directory full of files and reports the number of completely observed cases in each data file. The function should return a data frame where the first column is the name of the file and the second column is the number of complete cases. A prototype of this function follows
complete <- function(directory, id = 1:332){
results<-data.frame(id,nobs)
for i in id{
id <- as.numeric(i)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
rbind(data.frame(id=i,nobs=nrow(i)))
}}
You can see some example output from this function. The function that you write should be able to match this output. Please save your code to a file named complete.R. To run the test script for this part, make sure your working directory has the file complete.R in it and the run
source("http://spark-public.s3.amazonaws.com/compdata/scripts/complete-test.R")
complete.testscript()
complete <- function(directory, id = 1:332){
results<-data.frame(id,nobs)
for i in id{
id <- as.numeric(i)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
rbind(data.frame(id=i,nobs=nrow(i)))
}}
#Part 2
#Write a function that reads a directory full of files and reports the number of completely observed cases in each data file. The function should return a data frame where the first column is the name of the file and the second column is the number of complete cases. A prototype of this function follows
complete <- function(directory, id = 1:332){
results<-data.frame(id,nobs)
for i in id{
id <- as.numeric(i)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
rbind(data.frame(id=i,nobs=nrow(i)))}
}
#Part 2
#Write a function that reads a directory full of files and reports the number of completely observed cases in each data file. The function should return a data frame where the first column is the name of the file and the second column is the number of complete cases. A prototype of this function follows
complete <- function(directory, id = 1:332){
results<-data.frame(id,nobs)
for i in id{
id <- as.numeric(i)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
rbind(data.frame(id=i,nobs=nrow(i)))}}
getmonitor <- function(id, directory, summarize = FALSE){
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character
## 'directory' is a character vector of length 1 indicating, or a numeric.
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
id <- as.numeric(id)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
content <- read.csv(path)
if(summarize == TRUE){
print(summary(content))
}
source("http://spark-public.s3.amazonaws.com/compdata/scripts/getmonitor-test.R")
getmonitor.testscript()
source('~/GitHub/Coursera-Computing-for-Data-Analysis-R/Week 1/getmonitor.R')
source("http://spark-public.s3.amazonaws.com/compdata/scripts/getmonitor-test.R")
getmonitor.testscript()
setwd("~/GitHub/Coursera-Computing-for-Data-Analysis-R/Week 1")
getmonitor.testscript()
complete <- function(directory, id = 1:332){
results<-data.frame(id,nobs)
for i in id{
id <- as.numeric(i)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
rbind(data.frame(id=i,nobs=nrow(i))) }}
complete <- function(directory, id = 1:332){
results<-data.frame(id,nobs)
for i in id{
id <- as.numeric(i)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
solution<-rbind(data.frame(id=i,nobs=nrow(i)))
}
complete <- function(directory, id = 1:332){
results<-data.frame(id,nobs)
for i in id{
id <- as.numeric(i)
filename <- paste(sprintf("%03.f",id), "csv", sep = ".")
path <- paste(directory, filename, sep = "/")
solution<-rbind(data.frame(id=i,nobs=nrow(i)))}
}
source('~/GitHub/Coursera-Computing-for-Data-Analysis-R/Week 1/complete.R')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
dataFrame<-NULL
for(i in id){
df<-getmonitor(i,directory)
nobs<-nrow(subset(df,sulfate!="NA" & nitrate!="NA"))
rbind(dataFrame,data.frame(id=i,nobs=nobs))->dataFrame
}
return(dataFrame)
}
source("http://spark-public.s3.amazonaws.com/compdata/scripts/complete-test.R")
complete.testscript()
source("http://spark-public.s3.amazonaws.com/compdata/scripts/complete-test.R")
complete.testscript()
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
dataFrame<-NULL
for(i in id){
df<-getmonitor(i,directory)
nobs<-nrow(subset(df,sulfate!="NA" & nitrate!="NA"))
rbind(dataFrame,data.frame(id=i,nobs=nobs))->dataFrame}
return(dataFrame)
}
complete.testscript()
source('~/GitHub/Coursera-Computing-for-Data-Analysis-R/Week 1/complete.R')
complete.testscript()
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
id <- as.integer(id)
if(grep("specdata", directory) == 1){
directory <- "/.../Computing for Data Analysis/Week2/specdata/"
} # "..." is the directory in your computer; masked here for privacy
len <- length(id)
completedata <- rep(0, len)
j = 1
for(i in id){
data <- getmonitor(i, directory)
#sulfatelen <- dim(data[!is.na(data$sulfate), ])[1]
#nitratelen <- dim(data[!is.na(data$nitrate), ])[1]
idlen <- sum(complete.cases(data))
#idlen <- min(sulfatelen, nitratelen)
completedata[j] <- idlen
j <- j + 1
}
ret <- data.frame(id = id, nobs = completedata)
ret
}
complete.testscript()
source('~/GitHub/Coursera-Computing-for-Data-Analysis-R/Week 1/complete.R')
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
dataFrame<-NULL
for(i in id){
df<-getmonitor(i,directory)
nobs<-nrow(subset(df,sulfate!="NA" & nitrate!="NA"))  #this is strong-coupled on the data frame format of all the monitors
rbind(dataFrame,data.frame(id=i,nobs=nobs))->dataFrame
}
return(dataFrame)
}
source('~/GitHub/Coursera-Computing-for-Data-Analysis-R/Week 1/complete.R')
source("http://spark-public.s3.amazonaws.com/compdata/scripts/complete-test.R")
complete.testscript()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
nFiles<-length(list.files(directory))
vec<-c()
monitorsToCorr<-subset(complete(directory,1:nFiles),nobs>threshold)[1][,1]#get all the monitors to correlate
#formatMonitor Anon fx, will subselect the getmonitor function to apply the correlation
formatMonitor <-function(i,directory) subset(getmonitor(i,directory),sulfate!="NA" & nitrate!="NA",select=c(sulfate,nitrate))
for(i in monitorsToCorr){
monitor<-formatMonitor(i,directory)
vec<-c(vec,cor(monitor)[2])
}
return(vec)
}
source("http://spark-public.s3.amazonaws.com/compdata/scripts/corr-test.R")
corr.testscript()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
nFiles<-length(list.files(directory))
vec<-c()
monitorsToCorr<-subset(complete(directory,1:nFiles),nobs>threshold)[1][,1]#get all the monitors to correlate
#formatMonitor Anon fx, will subselect the getmonitor function to apply the correlation
formatMonitor <-function(i,directory) subset(getmonitor(i,directory),sulfate!="NA" & nitrate!="NA",select=c(sulfate,nitrate))
for(i in monitorsToCorr){
monitor<-formatMonitor(i,directory)
vec<-c(vec,cor(monitor)[2])
}
return(vec)
}
source("http://spark-public.s3.amazonaws.com/compdata/scripts/corr-test.R")
corr.testscript()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
nFiles<-length(list.files(directory))
vec<-c()
monitorsToCorr<-subset(complete(directory,1:nFiles),nobs>threshold)[1][,1]
formatMonitor <-function(i,directory) subset(getmonitor(i,directory),sulfate!="NA" & nitrate!="NA",select=c(sulfate,nitrate))
for(i in monitorsToCorr){
monitor<-formatMonitor(i,directory)
vec<-c(vec,cor(monitor)[2])
}
return(vec)
}
corr.testscript()
source("http://spark-public.s3.amazonaws.com/compdata/scripts/corr-test.R")
corr.testscript()
getmonitor <- function(id,directory,summarize=FALSE){
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
file_type<-".csv"
# pad with zeros
padz <- function(x, n=max(nchar(x))) gsub(" ", "0", formatC(x, width=n))
file_path=gsub(" ","",paste(directory,"/",padz(id,3),file_type,sep=""))
data<-read.csv(file_path)
if (summarize==TRUE)
print (summary(data))
return(data)
}
cube <- function(x, n) {
x^3
}
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow()
POW()
x <- 1:10
if(x > 5) {
x <- 0
}
iris
mean(Sepal.Length)
mean(iris$Sepal.Length)
mean(iris$Sepal.Length,species==virginica)
mean(iris$Sepal.Length,iris$species==virginica)
mean(iris$Sepal.Length,iris$species=="virginica")
a<-subset(iris,iris$species=="virginica")
mean(a$Sepal.Length)
View(a)
iris$species=="virginica"
attach(iris)
species=="virginica"
iris$species=="virginica"
species
iris$Species=="virginica"
mean(iris$Sepal.Length,iris$Species=="virginica")
a<-subset(iris,iris$Species=="virginica")
mean(a$Sepal.Length)
View(a)
a<-iris
View(a)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
colMeans(iris[,1:4])
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
colMeans(iris)
library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
View(mtcars)
sort(mtcars,mtcars$cyl)
sort(mtcars,T)
tapply(mtcars$hp, mtcars$cyl, mean)
122.28571-82.63636
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
debug(ls)
ls
209.21429 -82.63636
